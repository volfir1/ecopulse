const o="http://localhost:5000/api",i={getAllUsers:async()=>{try{const s=await fetch(`${o}/auth/users`,{method:"GET",headers:{"Content-Type":"application/json"},credentials:"include"}),e=await s.json();if(!s.ok)throw new Error(e.message||"Failed to fetch users");return e}catch(s){throw console.error("Error fetching users:",s),s}},getCurrentUser:async()=>{try{const s=await fetch(`${o}/auth/verify`,{method:"GET",headers:{"Content-Type":"application/json"},credentials:"include"});console.log("Raw API Response:",s),console.log("Response status:",s.status);const e=await s.json();if(console.log("Parsed API Response:",e),console.log("User object in response:",e.user),!s.ok)throw new Error(e.message||"Failed to fetch user profile");return{success:!0,user:{id:e.user._id,firstName:e.user.firstName,lastName:e.user.lastName,email:e.user.email,phone:e.user.phone||"",role:e.user.role}}}catch(s){throw console.error("Error fetching user profile:",s),s}},getUserById:async s=>{try{const e=await fetch(`${o}/users/${s}`,{method:"GET",headers:{"Content-Type":"application/json"},credentials:"include"}),r=await e.json();if(!e.ok)throw new Error(r.message||"Failed to fetch user");return r}catch(e){throw console.error(`Error fetching user with ID ${s}:`,e),e}},updateProfile:async(s,e)=>{try{const r=await fetch(`${o}/users/${s}`,{method:"PUT",headers:{"Content-Type":"application/json"},credentials:"include",body:JSON.stringify(e)}),t=await r.json();if(!r.ok)throw new Error(t.message||"Failed to update profile");return t}catch(r){throw console.error("Error updating profile:",r),r}},updatePassword:async(s,e)=>{try{const r=await fetch(`${o}/auth/reset-password`,{method:"POST",headers:{"Content-Type":"application/json"},credentials:"include",body:JSON.stringify({token:s,newPassword:e})}),t=await r.json();if(!r.ok)throw new Error(t.message||"Failed to update password");return{success:!0,message:t.message||"Password updated successfully",accessToken:t.accessToken}}catch(r){throw{success:!1,message:r.message||"Password update failed",error:r}}},changePassword:async(s,e)=>{try{const r=localStorage.getItem("user"),t=r?JSON.parse(r):null,a=t==null?void 0:t.id;if(console.log("Changing password for user ID:",a),!a)throw new Error("User not authenticated");if(!/^[0-9a-fA-F]{24}$/.test(a))throw new Error("Invalid user ID format");const n=await fetch(`${o}/users/${a}/password`,{method:"PUT",headers:{"Content-Type":"application/json"},credentials:"include",body:JSON.stringify({currentPassword:s,newPassword:e})}),c=await n.json();if(!n.ok)throw new Error(c.message||"Failed to change password");return{success:!0,message:c.message||"Password changed successfully"}}catch(r){throw console.error("Password change error:",r),{success:!1,message:r.message||"Password change failed",error:r}}},updateUserRole:async(s,e)=>{try{const r=await fetch(`${o}/auth/users/${s}/role`,{method:"PUT",headers:{"Content-Type":"application/json"},credentials:"include",body:JSON.stringify({role:e})}),t=await r.json();if(!r.ok)throw new Error(t.message||"Failed to update user role");return{success:!0,message:t.message||"Role updated successfully",user:t.user}}catch(r){throw console.error("Error updating user role:",r),r}},softDeleteUser:async s=>{try{const e=await fetch(`${o}/users/${s}`,{method:"DELETE",headers:{"Content-Type":"application/json"},credentials:"include"}),r=await e.json();if(!e.ok)throw new Error(r.message||"Failed to deactivate user");return{success:!0,message:r.message||"User has been successfully deactivated"}}catch(e){throw console.error("Error deactivating user:",e),e}},restoreUser:async s=>{try{const e=await fetch(`${o}/users/${s}/restore`,{method:"PUT",headers:{"Content-Type":"application/json"},credentials:"include"}),r=await e.json();if(!e.ok)throw new Error(r.message||"Failed to restore user");return{success:!0,message:r.message||"User has been successfully restored",user:r.user}}catch(e){throw console.error("Error restoring user:",e),e}},getAllUsersWithDeleted:async()=>{try{const s=await fetch(`${o}/users/users/all`,{method:"GET",headers:{"Content-Type":"application/json"},credentials:"include"}),e=await s.json();if(!s.ok)throw new Error(e.message||"Failed to fetch all users");return e}catch(s){throw console.error("Error fetching all users:",s),s}}};export{i as u};
