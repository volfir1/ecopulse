import{a as i}from"./axios-CmsuhreG.js";const u="http://localhost:5000/api",s=i.create({baseURL:u,withCredentials:!0,headers:{"Content-Type":"application/json"}}),l=()=>localStorage.getItem("authToken")||localStorage.getItem("accessToken")||localStorage.getItem("token");s.interceptors.request.use(e=>{const t=l();return t&&(e.headers.Authorization=`Bearer ${t}`),e},e=>Promise.reject(e));s.interceptors.response.use(e=>e,e=>{var r,c,a,n;console.error("API Error:",e);const t={success:!1,message:((c=(r=e.response)==null?void 0:r.data)==null?void 0:c.message)||"An error occurred",status:(a=e.response)==null?void 0:a.status,data:(n=e.response)==null?void 0:n.data};return Promise.reject(t)});const o=e=>!e||!e.data?{success:!1,data:[]}:e.data.success!==void 0?{success:e.data.success,data:e.data.data||[],message:e.data.message}:{success:!0,data:e.data},k={createTicket:async e=>{try{console.log("Creating ticket with data:",e);const t=await s.post("/ticket",e);return o(t)}catch(t){throw console.error("Ticket creation error:",t),t}},getUserTickets:async()=>{try{console.log("Fetching user tickets...");const e=await s.get("/ticket/user");console.log("User tickets API response:",e);const t=o(e);return console.log("Normalized user tickets:",t),t}catch(e){throw console.error("Error fetching user tickets:",e),e}},getAllTickets:async(e={})=>{try{const t=new URLSearchParams(e),r=t.toString()?`?${t.toString()}`:"",c=await s.get(`/ticket/all${r}`);return o(c)}catch(t){throw console.error("Error fetching all tickets:",t),t}},getTicketStats:async()=>{try{const e=await s.get("/ticket/stats");return o(e)}catch(e){return console.error("Error fetching ticket stats:",e),{success:!1,data:{total:0,open:0,inProgress:0,resolved:0,closed:0,unassigned:0},message:e.message||"Failed to fetch ticket stats"}}},getTicket:async e=>{try{if(!e||typeof e!="string"||e.trim()==="")throw new Error("Invalid ticket ID");console.log(`Fetching ticket with ID ${e}`);const t=await s.get(`/ticket/${e}`);return o(t)}catch(t){throw console.error(`Error fetching ticket ${e}:`,t),t}},updateTicketStatus:async(e,t)=>{try{if(!e||!t)throw new Error("Ticket ID and status are required");const r=await s.put(`/ticket/${e}/status`,{status:t});return o(r)}catch(r){throw console.error(`Error updating ticket ${e} status:`,r),r}},replyToTicket:async(e,t)=>{try{if(!e||!t)throw new Error("Ticket ID and content are required");const r=await s.post(`/ticket/${e}/reply`,{content:t});return o(r)}catch(r){throw console.error(`Error replying to ticket ${e}:`,r),r}},assignTicket:async(e,t)=>{try{if(!e||!t)throw new Error("Ticket ID and admin ID are required");const r=await s.put(`/ticket/${e}/assign`,{adminId:t});return o(r)}catch(r){throw console.error(`Error assigning ticket ${e}:`,r),r}},deleteTicket:async e=>{try{if(!e)throw new Error("Ticket ID is required");return await s.delete(`/ticket/${e}`),{success:!0,message:"Ticket deleted successfully"}}catch(t){throw console.error(`Error deleting ticket ${e}:`,t),t}},getAdmins:async()=>{try{const e=await s.get("/ticket/admins");return o(e)}catch(e){return console.error("Error fetching admin users:",e),{success:!1,message:e.message||"Failed to fetch admin users",data:[]}}}};export{k as t};
