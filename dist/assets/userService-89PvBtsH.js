import{a as o}from"./axios-CmsuhreG.js";const n="http://localhost:5000/api",l=()=>{const s=localStorage.getItem("authToken");return console.log("Auth token retrieved:",s?`${s.substring(0,15)}...`:"No token found"),s},c=(s,e)=>{var t;return console.error(`API error in ${e}:`,s),s.response?(console.error("Error response:",s.response.data),console.error("Error status:",s.response.status),{success:!1,message:((t=s.response.data)==null?void 0:t.message)||`Server error (${s.response.status})`,error:s.response.data}):s.request?(console.error("No response received:",s.request),{success:!1,message:"No response from server. Please check your network connection.",error:{type:"network",details:s.request}}):(console.error("Request setup error:",s.message),{success:!1,message:s.message||"An unexpected error occurred",error:{type:"setup",details:s.message}})},u={getAllUsers:async()=>{try{console.log("Fetching all users...");const s=l();if(!s)return console.warn("No auth token available for getAllUsers"),{success:!1,users:[]};const e=await o.get(`${n}/auth/users`,{headers:{Authorization:`Bearer ${s}`}});if(console.log("API response status:",e.status),e.data&&e.data.data&&Array.isArray(e.data.data.users)){const t=e.data.data.users;console.log(`Found ${t.length} total users`);const a=t.filter(r=>!r.isDeactivated&&!r.isAutoDeactivated);return console.log(`After filtering: ${a.length} active users`),{success:!0,users:a}}else if(e.data&&Array.isArray(e.data.users)){const t=e.data.users;console.log(`Found ${t.length} total users (alternate structure)`);const a=t.filter(r=>!r.isDeactivated&&!r.isAutoDeactivated);return console.log(`After filtering: ${a.length} active users`),{success:!0,users:a}}else return console.warn("Unexpected data structure in getAllUsers:",e.data),{success:!0,users:[]}}catch(s){return c(s,"getAllUsers")}},getAllDeactivated:async()=>{try{console.log("Fetching all users including deleted ones...");const s=l();if(!s)return console.warn("No auth token available for getAllDeactivated"),{success:!1,users:[]};const e=await o.get(`${n}/auth/users`,{params:{includeDeleted:!0,includeAutoDeactivated:!0,includeInactive:!0,all:!0},headers:{Authorization:`Bearer ${s}`}});console.log("API response status for getAllDeactivated:",e.status),e.data&&(console.log("Response data structure:",Object.keys(e.data)),e.data.data&&console.log("Response data.data structure:",Object.keys(e.data.data)));let t=[];return e.data&&e.data.data&&Array.isArray(e.data.data.users)?t=e.data.data.users:e.data&&Array.isArray(e.data.users)?t=e.data.users:e.data&&Array.isArray(e.data)?t=e.data:e.data&&e.data.data&&Array.isArray(e.data.data)?t=e.data.data:(console.warn("Unexpected data structure in getAllDeactivated:",e.data),t=[]),console.log(`Found ${t.length} total users (including deleted/deactivated)`),t.length>0&&console.log("Sample user from API:",JSON.stringify(t[0],null,2)),{success:!0,users:t}}catch(s){return c(s,"getAllDeactivated")}},deactivateUser:async s=>{try{console.log(`Attempting to deactivate user ${s}...`);const e=l();if(!e)return console.warn("No auth token available for deactivateUser"),{success:!1,message:"Not authenticated"};const t=await o.post(`${n}/auth/admin/deactivate-user`,{userId:s},{headers:{Authorization:`Bearer ${e}`}});return console.log("Deactivation response:",t.data),{success:!0,message:t.data.message||"User successfully deactivated",...t.data}}catch(e){return c(e,"deactivateUser")}},restoreUser:async s=>{try{console.log(`Attempting to restore user ${s}...`);const e=l();if(!e)return console.warn("No auth token available for restoreUser"),{success:!1,message:"Not authenticated"};const t=await o.post(`${n}/auth/reactivate-account`,{userId:s},{headers:{Authorization:`Bearer ${e}`}});return console.log("Restoration response:",t.data),{success:!0,message:t.data.message||"User successfully restored",...t.data}}catch(e){return c(e,"restoreUser")}},updateUserRole:async(s,e)=>{try{console.log(`Updating user ${s} role to ${e}...`);const t=l();if(!t)return console.warn("No auth token available for updateUserRole"),{success:!1,message:"Not authenticated"};const a=await o.put(`${n}/auth/users/${s}/role`,{role:e},{headers:{Authorization:`Bearer ${t}`}});return console.log("Role update response:",a.data),{success:!0,message:a.data.message||`User role updated to ${e}`,...a.data}}catch(t){return c(t,"updateUserRole")}},softDeleteUser:async s=>(console.warn("softDeleteUser is deprecated, use deactivateUser instead"),u.deactivateUser(s))};export{u};
